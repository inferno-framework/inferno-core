swagger: "2.0"
info:
  description: "Inferno JSON API"
  version: "0.1.1"
  title: "Inferno JSON API"
  contact:
    email: "inferno@groups.mitre.org"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/api"
tags:
- name: "Test Suite"
  description: "A collection of tests"
- name: "Test Session"
  description: "An individual testing session"
- name: "Test Run"
  description: "An individual test run"
- name: "Request"
  description: "Details of HTTP Requests"
- name: "Version"
  description: "Inferno version"
schemes:
- "http"
- "https"
paths:
  /test_suites:
    get:
      tags:
      - "Test Suite"
      summary: "List all test suites"
      description: ""
      produces:
      - "application/json"
      responses:
        "200":
          description: "success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TestSuite"
  /test_suites/{test_suite_id}:
    get:
      tags:
      - "Test Suite"
      summary: "Get a single test suite"
      description: ""
      produces:
      - "application/json"
      parameters:
      - in: "path"
        type: "string"
        name: "test_suite_id"
        description: "ID of the test suite"
        required: true
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/TestSuite"
        "404":
          description: "Test suite not found"
  /test_suites/{test_suite_id}/requirements:
    get:
      tags:
      - "Requirement"
      summary: "Get the requirements for a test suite for a given session."
      produces:
      - "application/json"
      parameters:
      - in: "path"
        type: "string"
        name: "test_suite_id"
        description: "ID of the test suite"
        required: true
      - in: "query"
        type: "string"
        name: "session_id"
        description: "ID of the test session"
        required: false
      responses:
        "200":
          description: "success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Requirement"
        "404":
          description: "Test suite or Session not found"
  /test_suites/{test_suite_id}/check_configuration:
    put:
      tags:
      - "Test Suite"
      summary: "Check the configuration for a test suite"
      description: ""
      produces:
      - "application/json"
      parameters:
      - in: "path"
        type: "string"
        name: "test_suite_id"
        description: "ID of the test suite"
        required: true
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Message"
        "404":
          description: "Test suite not found"
  /test_sessions:
    post:
      tags:
      - "Test Session"
      summary: "Start a new test session"
      description: ""
      produces:
      - "application/json"
      parameters:
      - in: "query"
        type: "string"
        name: "test_suite_id"
        description: "ID of the test suite being run in this test session"
        required: true
      - in: "query"
        type: "string"
        name: "preset_id"
        description: "ID of a preset to use with this test session"
        required: false
      responses:
        "201":
          description: "Success"
          schema:
            $ref: "#/definitions/TestSession"
        "400":
          description: "Invalid test_suite_id"
  /test_sessions/{test_session_id}:
    get:
      tags:
      - "Test Session"
      summary: "Get an existing test session"
      description: ""
      produces:
      - "application/json"
      parameters:
      - in: "path"
        type: "string"
        name: "test_session_id"
        description: "ID of the test session"
        required: true
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/TestSession"
        "404":
          description: "Test session not found"
  /test_sessions/{test_session_id}/results:
    get:
      tags:
      - "Result"
      summary: "Get the results for a test session"
      description: "Get the most recent set of results for each test/group/suite in the session. Use the `all` query parameter to retrieve all results."
      produces:
      - "application/json"
      parameters:
      - in: "path"
        type: "string"
        name: "test_session_id"
        description: "ID of the test session"
        required: true
      - in: "query"
        type: "boolean"
        name: "all"
        description: "Whether to retrieve all results rather than only the most recent"
        required: false
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Result"
        "404":
          description: "Test session not found"
  /test_sessions/{test_session_id}/session_data:
    get:
      tags:
      - "Session Data"
      summary: "Get the session data for a test session"
      description: "Get the most recent set of session data in a session. This represents the values from test inputs and outputs."
      produces:
      - "application/json"
      parameters:
      - in: "path"
        type: "string"
        name: "test_session_id"
        description: "ID of the test session"
        required: true
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SessionData"
        "404":
          description: "Test session not found"
  /test_sessions/{test_session_id}/session_data/apply_preset:
    get:
      tags:
      - "Session Data"
      summary: "Apply preset inputs to a test session"
      description: "Use a set of predefined inputs in a test session."
      parameters:
      - in: "path"
        type: "string"
        name: "test_session_id"
        description: "ID of the test session"
        required: true
      - in: "query"
        type: "string"
        name: "preset_id"
        description: "ID of the preset"
        required: true
      responses:
        "200":
          description: "Success"
        "404":
          description: "Test session or preset not found"
  /test_runs:
    post:
      tags:
      - "Test Run"
      summary: "Execute a suite, group, or test"
      description: ""
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Test suite, group, or test and inputs to execute."
        required: true
        schema:
          $ref: "#/definitions/TestRun"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid test_group_id, test_suite_id, test_id or inputs"
  /test_runs/{test_run_id}:
    get:
      tags:
      - "Test Run"
      summary: "Get an existing test run"
      description: ""
      produces:
      - "application/json"
      parameters:
      - in: "path"
        type: "string"
        name: "test_run_id"
        description: "ID of the test run"
        required: true
      - in: "query"
        type: "boolean"
        name: "include_results"
        description: "Whether to include the test run's results"
        required: false
      - in: "query"
        type: "string"
        name: "after"
        description: "Only include results from at or after an ISO8601 date time"
        format: "date-time"
        required: false
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/TestRun"
        "404":
          description: "Test session not found"
    delete:
      tags:
      - "Test Run"
      summary: "Cancel an existing test run"
      description: ""
      produces:
      - "application/json"
      parameters:
      - in: "path"
        type: "string"
        name: "test_run_id"
        description: "ID of the test run"
        required: true
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/TestRun"
        "404":
          description: "Test session not found"
  /test_sessions/{test_session_id}/last_test_run:
    get:
      tags:
      - "Test Run"
      summary: "Get the most recent test run"
      description: ""
      produces:
      - "application/json"
      parameters:
      - in: "path"
        type: "string"
        name: "test_session_id"
        description: "ID of the test session"
        required: true
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/TestRun"
        "404":
          description: "Test session not found"
  /test_runs/{test_run_id}/results:
    get:
      tags:
      - "Result"
      summary: "Get the results for a test run"
      description: ""
      produces:
      - "application/json"
      parameters:
      - in: "path"
        type: "string"
        name: "test_run_id"
        description: "ID of the test run"
        required: true
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Result"
        "404":
          description: "Test run not found"
  /request/{request_id}:
    get:
      tags:
      - "Request"
      summary:
        "Get the details of a request (and response)"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        type: "string"
        name: "request_id"
        description: "ID of the request"
        required: true
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Request"
        "404":
          description: "HTTP request not found"
  /requirements/{requirement_id}:
    get:
      tags:
      - "Requirement"
      summary: "Get a single Requirement"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        type: "string"
        name: "requirement_id"
        description: "ID of the requirement"
        required: true
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Requirement"
        "404":
          description: "Requirement not found"
  /version:
    get:
      tags:
      - "Version"
      summary: "Get the version of Inferno currently being queried."
      produces:
      - "application/json"
      responses:
        "200":
          description: "success"
          schema:
            $ref: "#/definitions/Version"

definitions:
  TestSession:
    type: "object"
    required:
    - "test_suite_id"
    properties:
      id:
        type: "string"
        readOnly: true
      test_suite:
        $ref: "#/definitions/TestSuite"
      test_run:
        $ref: "#/definitions/TestRun"
      results:
        readOnly: true
        type: "array"
        items:
          $ref: "#/definitions/Result"
      suite_options:
        type: "array"
        items:
          $ref: "#/definitions/SuiteOption"
  TestRun:
    type: "object"
    required:
    - "test_session_id"
    properties:
      id:
        type: "string"
        readOnly: true
      test_count:
        type: "number"
        readOnly: true
      test_session_id:
        type: "string"
      test_suite_id:
        type: "string"
      test_group_id:
        type: "string"
      test_id:
        type: "string"
      inputs:
        type: "array"
        items:
          $ref: "#/definitions/Input"
      results:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Result"
  Result:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
      test_suite_id:
        type: "string"
      test_group_id:
        type: "string"
      test_id:
        type: "string"
      result:
        type: "string"
        enum: [pass, fail, skip, omit, error, running, wait, cancel]
      test_run_id:
        type: "string"
      result_message:
        type: "string"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"
      messages:
        type: "array"
        items:
          $ref: "#/definitions/Message"
      requests:
        type: "array"
        items:
          $ref: "#/definitions/RequestSummary"
      outputs:
        type: "array"
        items:
          $ref: "#/definitions/SessionData"
      optional:
        type: "boolean"
  RequestSummary:
    type: "object"
    required:
    - "id"
    - "index"
    - "created_at"
    - "verb"
    - "url"
    - "direction"
    - "result_id"
    properties:
      id:
        type: "string"
      index:
        type: "integer"
      created_at:
        type: "string"
      verb:
        type: "string"
      url:
        type: "string"
      direction:
        type: "string"
        enum: ["in", "out"]
      status:
        type: "integer"
      result_id:
        type: "string"
  Request:
    type: "object"
    required:
    - "id"
    - "index"
    - "created_at"
    - "verb"
    - "url"
    - "direction"
    - "result_id"
    properties:
      id:
        type: "string"
      index:
        type: "integer"
      created_at:
        type: "string"
      verb:
        type: "string"
      url:
        type: "string"
      direction:
        type: "string"
        enum: ["in", "out"]
      status:
        type: "integer"
      result_id:
        type: "string"
      request_headers:
        type: "array"
        items:
          type: "object"
          properties:
            name:
              type: "string"
            value:
              type: "string"
      response_headers:
        type: "array"
        items:
          type: "object"
          properties:
            name:
              type: "string"
            value:
              type: "string"
      request_body:
        type: "string"
      response_body:
        type: "string"
  Message:
    type: "object"
    required:
    - "type"
    - "message"
    properties:
      type:
        type: "string"
        enum: [error, warning, info]
      message:
        type: "string"
  PresetSummary:
    type: "object"
    required:
    - "id"
    - "title"
    properties:
      id:
        type: "string"
      title:
        type: "string"
  TestSuite:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "string"
      title:
        type: "string"
      short_title:
        type: "string"
      description:
        type: "string"
      short_description:
        type: "string"
      input_instructions:
        type: "string"
      links:
        type: "array"
        items:
          type: "object"
          properties:
            type:
              type: "string"
            label:
              type: "string"
            url:
              type: "string"
      test_groups:
        type: "array"
        items:
          $ref: "#/definitions/TestGroup"
      inputs:
        type: "array"
        items:
          $ref: "#/definitions/Input"
      test_count:
        type: "number"
        readOnly: true
      version:
        type: "string"
      configuration_messages:
        type: "array"
        items:
          $ref: "#/definitions/Message"
      presets:
        type: "array"
        items:
          $ref: "#/definitions/PresetSummary"
      suite_options:
        type: "array"
        items:
          $ref: "#/definitions/SuiteOption"
      suite_summary:
        type: "string"
      verifies_requirements:
        type: "array"
        readOnly: true,
        items:
          type: "string"
  SuiteOption:
    type: "object"
    required:
    - "id"
    - "title"
    - "list_options"
    properties:
      id:
        type: "string"
        readOnly: true
      title:
        type: "string"
        readOnly: true
      default:
        type: "string"
        readOnly: true
      description:
        type: "string"
        readOnly: true
      value:
        type: "string"
      list_options:
        type: "array"
        readOnly: true
        items:
          type: "object"
          properties:
            label:
              type: "string"
            value:
              type: "string"
  TestGroup:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
      short_id:
        type: "string"
      title:
        type: "string"
      short_title:
        type: "string"
      description:
        type: "string"
      short_description:
        type: "string"
      input_instructions:
        type: "string"
      run_as_group:
        type: "boolean"
      test_groups:
        type: "array"
        items:
          $ref: "#/definitions/TestGroup"
      tests:
        type: "array"
        items:
          $ref: "#/definitions/Test"
      inputs:
        type: "array"
        items:
          $ref: "#/definitions/Input"
      test_count:
        type: "number"
        readOnly: true
      user_runnable:
        type: "boolean"
        readOnly: true
      optional:
        type: "boolean"
        readOnly: true
      verifies_requirements:
        type: "array"
        readOnly: true,
        items:
          type: "string"
  Test:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "string"
      short_id:
        type: "string"
      title:
        type: "string"
      short_title:
        type: "string"
      description:
        type: "string"
      short_description:
        type: "string"
      input_instructions:
        type: "string"
      inputs:
        type: "array"
        items:
          $ref: "#/definitions/Input"
      user_runnable:
        type: "boolean"
        readOnly: true
      optional:
        type: "boolean"
        readOnly: true
      verifies_requirements:
        type: "array"
        readOnly: true,
        items:
          type: "string"
  Input:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      value:
        type: "string"
      title:
        type: "string"
        readOnly: true
      description:
        type: "string"
        readOnly: true
      optional:
        type: "boolean"
        readOnly: true
      type:
        type: "string"
        readOnly: true
      locked:
        type: "boolean"
        readOnly: true
      hidden:
        type: "boolean"
        readOnly: true
      options:
        type: "array"
        readOnly: true
        items:
          type: "object"
          properties:
            list_options:
              type: "array"
              items:
                type: "object"
                properties:
                  label:
                    type: "string"
                  value:
                    type: "string"
  SessionData:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      value:
        type: "string"
  Version:
    type: "object"
    required:
    - "version"
    properties:
      version:
        type: "string"
  Requirement:
    type: "object"
    required:
    - "id"
    - "requirement"
    - "conformance"
    - "actor"
    properties:
      id:
        type: "string"
      requirement:
        type: "string"
      conformance:
        type: "string"
      actor:
        type: "string"
      conditionality:
        type: "string"
      url:
        type: "string"
      sub_requirements:
        type: "array"
        items:
          type: "string"

